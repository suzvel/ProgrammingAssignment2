
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.68 (7238) x86_64-apple-darwin13.4.0]

[History restored from /Users/suzvel/.Rapp.history]

2016-11-27 20:03:26.773 R[19574:2206767] *** WARNING: Method convertPointFromBase: in class NSView is deprecated on 10.7 and later. It should not be used in new applications. 
> makeCacheMatrix <- function(x = matrix()) {
+         ## @x: a square invertible matrix
+         ## return: a list containing functions to
+         ##              1. set the matrix
+         ##              2. get the matrix
+         ##              3. set the inverse
+         ##              4. get the inverse
+         ##         this list is used as the input to cacheSolve()
+         
+         inv = NULL
+         set = function(y) {
+                 # use `<<-` to assign a value to an object in an environment 
+                 # different from the current environment. 
+                 x <<- y
+                 inv <<- NULL
+         }
+         get = function() x
+         setinv = function(inverse) inv <<- inverse 
+         getinv = function() inv
+         list(set=set, get=get, setinv=setinv, getinv=getinv)
+ }
> 
> cacheSolve <- function(x, ...) {
+         ## @x: output of makeCacheMatrix()
+         ## return: inverse of the original matrix input to makeCacheMatrix()
+         
+         inv = x$getinv()
+         
+         # if the inverse has already been calculated
+         if (!is.null(inv)){
+                 # get it from the cache and skips the computation. 
+                 message("getting cached data")
+                 return(inv)
+         }
+         
+         # otherwise, calculates the inverse 
+         mat.data = x$get()
+         inv = solve(mat.data, ...)
+         
+         # sets the value of the inverse in the cache via the setinv function.
+         x$setinv(inv)
+         
+         return(inv)
+ }
> 
> 